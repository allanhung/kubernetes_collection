loki-distributed:
  enabled: true
  global:
    image:
      registry: docker.io
  
  loki:
    image:
      repository: grafana/loki
      tag: null
    config: |
      auth_enabled: false
  
      server:
        log_level: info
        http_listen_port: 3100
        grpc_listen_port: 9095
        graceful_shutdown_timeout: 1m
        http_server_read_timeout: 2m
        http_server_write_timeout: 2m
        http_server_idle_timeout: 3m
        grpc_server_max_recv_msg_size: 83886080
        grpc_server_max_send_msg_size: 83886080
        grpc_server_max_concurrent_streams: 5000
  
      distributor:
        ring:
          heartbeat_timeout: 10s
          kvstore:
            store: etcd
            prefix: "collectors/"
            etcd: 
              endpoints: 
              - http://{{ .Release.Name }}-etcd-0.{{ .Release.Name }}-etcd-headless:2379
              - http://{{ .Release.Name }}-etcd-1.{{ .Release.Name }}-etcd-headless:2379
              - http://{{ .Release.Name }}-etcd-2.{{ .Release.Name }}-etcd-headless:2379
              dial_timeout: 15s
              max_retries: 10
  
      ingester_client:
        pool_config:
          health_check_ingesters: true
          client_cleanup_period: 5s
        remote_timeout: 1m
        grpc_client_config:
          max_recv_msg_size: 83886080
          max_send_msg_size: 83886080
          use_gzip_compression: true
          rate_limit: 0
          rate_limit_burst: 0
          backoff_on_ratelimits: true
          backoff_config:
            min_period: 10s
            max_period: 5m
            max_retries: 10
  
      ingester:
        lifecycler:
          ring:
            heartbeat_timeout: 10s
            kvstore:
              store: etcd
              prefix: "collectors/"
              etcd:
                endpoints:
                - http://{{ .Release.Name }}-etcd-0.{{ .Release.Name }}-etcd-headless:2379
                - http://{{ .Release.Name }}-etcd-1.{{ .Release.Name }}-etcd-headless:2379
                - http://{{ .Release.Name }}-etcd-2.{{ .Release.Name }}-etcd-headless:2379
                dial_timeout: 15s
                max_retries: 10
          num_tokens: 128
          heartbeat_period: 5s
          join_after: 10s
          min_ready_duration: 10s
          final_sleep: 30s
        chunk_idle_period: 1m
        chunk_block_size: 262144
        chunk_encoding: snappy
        chunk_retain_period: 1m
        max_transfer_retries: 10
  
      limits_config:
        enforce_metric_name: false
        max_cache_freshness_per_query: 10m
        max_entries_limit_per_query: 20000
        reject_old_samples: true
        reject_old_samples_max_age: 168h
  
      schema_config:
        configs:
          - from: 2021-01-01
            store: boltdb-shipper
            object_store: s3
            schema: v11
            index:
              prefix: loki_index_
              period: 24h
  
      storage_config:
        aws:
          bucketnames: {{ .Values.bucketname }}
          endpoint: oss-{{ .Values.region }}.aliyuncs.com
          region: {{ .Values.region }}
          access_key_id: {{ .Values.AccessKey }}
          secret_access_key: {{ .Values.SecretKey }}
          insecure: false
          sse_encryption: false
          http_config:
            idle_conn_timeout: 90s
            response_header_timeout: 0s
            insecure_skip_verify: false
          s3forcepathstyle: true        
        index_queries_cache_config:
          memcached:
            batch_size: 100
            parallelism: 100
          memcached_client:
            consistent_hash: true
            host: {{ include "loki.memcachedIndexQueriesFullname" . }}
            service: http
        boltdb_shipper:
          active_index_directory: /var/loki/index
          shared_store: s3
          cache_location: /var/loki/cache
          resync_interval: 5s
          cache_ttl: 24h
  
      chunk_store_config:
        chunk_cache_config:
          memcached:
            batch_size: 100
            parallelism: 100
          memcached_client:
            consistent_hash: true
            host: {{ include "loki.memcachedChunksFullname" . }}
            service: http
        max_look_back_period: 0s
  
      query_range:
        align_queries_with_step: true
        max_retries: 5
        split_queries_by_interval: 15m
        cache_results: true
        results_cache:
          cache:
            memcached_client:
              consistent_hash: true
              host: {{ include "loki.memcachedFrontendFullname" . }}
              max_idle_conns: 16
              service: http
              timeout: 500ms
              update_interval: 1m
  
      frontend_worker:
        frontend_address: {{ include "loki.queryFrontendFullname" . }}:9095
  
      frontend:
        log_queries_longer_than: 5s
        compress_responses: true
  
      compactor:
        shared_store: s3
  
      ruler:
        storage:
          type: local
          local:
            directory: /etc/loki/rules
        ring:
          kvstore:
            store: etcd
            prefix: "ruler/"
            etcd:
              endpoints:
              - http://{{ .Release.Name }}-etcd-0.{{ .Release.Name }}-etcd-headless:2379
              - http://{{ .Release.Name }}-etcd-1.{{ .Release.Name }}-etcd-headless:2379
              - http://{{ .Release.Name }}-etcd-2.{{ .Release.Name }}-etcd-headless:2379
              dial_timeout: 15s
              max_retries: 10
          heartbeat_period: 5s
          heartbeat_timeout: 10s
          num_tokens: 128
        rule_path: /tmp/loki/scratch
        alertmanager_url: https://alertmanager.monitoring.svc.cluster.local
        external_url: {{ .Values.alertmanager_external_url }}
  
  serviceMonitor:
    enabled: true
    labels:
      release: po
  
  prometheusRule:
    enabled: true
    labels:
      release: po
    groups: 
    - name: loki-rules
      rules:
        - record: job:loki_request_duration_seconds_bucket:sum_rate
          expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, job)
        - record: job_route:loki_request_duration_seconds_bucket:sum_rate
          expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, job, route)
        - record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate
          expr: sum(rate(container_cpu_usage_seconds_total[1m])) by (node, namespace, pod, container)
  
  ingester:
    replicas: 3
    terminationGracePeriodSeconds: 300
    persistence:
      enabled: false
      size: 20Gi
      storageClass: my-storage-class
  
  distributor:
    replicas: 3
    terminationGracePeriodSeconds: 30
  
  querier:
    replicas: 3
    terminationGracePeriodSeconds: 30
  
  queryFrontend:
    replicas: 2
    terminationGracePeriodSeconds: 30
  
  # Configuration for the table-manager
  tableManager:
    enabled: false
    replicas: 1
    terminationGracePeriodSeconds: 30
  
  gateway:
    replicas: 1
    image:
      registry: docker.io
      repository: nginxinc/nginx-unprivileged
      tag: 1.19-alpine
    service:
      port: 80
      type: ClusterIP
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: my-nginx-class
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
  
  compactor:
    enabled: false
    persistence:
      enabled: false
      size: 20Gi
      storageClass: null
  
  ruler:
    enabled: true
    replicas: 1
    terminationGracePeriodSeconds: 300
    persistence:
      enabled: false
      size: 20Gi
      storageClass: my-storage-class
    directories:
      kube-system:
        rules.txt: |
          groups:
            - name: should_fire
              rules:
                - alert: logs_error_count_kube_system
                  expr: rate({namespace="kube-system"} |~ "[Ee]rror"[5m]) > 5
                  for: 5m
                  labels:
                    severity: critical
                  annotations:
                    summary: logs error count > 5 in kube-system
  
  memcached:
    image:
      registry: docker.io
      repository: memcached
      tag: 1.6.7-alpine
  
  memcachedExporter:
    enabled: true
    image:
      registry: docker.io
      repository: prom/memcached-exporter
      tag: v0.6.0
  
  memcachedChunks:
    enabled: true
    replicas: 2
    extraArgs:
      - -m 2048
      - -I 2m
      - -v
    resources:
      requests:
        cpu: 100m
        memory: 2Gi
      limits:
        cpu: "2"
        memory: 3Gi
    terminationGracePeriodSeconds: 30
  
  memcachedFrontend:
    enabled: true
    replicas: 2
    terminationGracePeriodSeconds: 30
  
  memcachedIndexQueries:
    enabled: true
    replicas: 2
    terminationGracePeriodSeconds: 30
  
  memcachedIndexWrites:
    enabled: false
    replicas: 1
    terminationGracePeriodSeconds: 30
  grafana:
    enabled: false
    sidecar:
      datasources:
        enabled: false

promtail:
  enabled: true
  image:
    repository: docker.io/grafana/promtail
    tag: 2.1.0
  serviceMonitor:
    enabled: true
    interval: ""
    labels:
      release: po
    annotations: {}
  config:
    snippets:
      scrapeConfigs: |
        - job_name: syslog
          syslog:
            listen_address: 0.0.0.0:1514
            labels:
              job: "syslog"
          relabel_configs:
          - source_labels: [__syslog_message_hostname]
            target_label: pod
          - source_labels: [__syslog_message_app_name]
            target_label: app
          - source_labels: [__syslog_message_severity]
            target_label: severity
          - source_labels: [__syslog_message_facility]
            target_label: facility
        - job_name: kubernetes-pods
          pipeline_stages:
            - docker: {}
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - source_labels:
            - __meta_kubernetes_pod_label_name
            target_label: __service__
          - source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: __host__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            replacement: $1
            separator: /
            source_labels:
            - __meta_kubernetes_namespace
            - __service__
            target_label: job
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: pod
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_container_name
            target_label: container
          - replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_uid
            - __meta_kubernetes_pod_container_name
            target_label: __path__
    file: |
      server:
        log_level: info
        http_listen_port: {{ .Values.config.serverPort }}
      client:
        url: http://{{ .Release.Name }}-loki-distributed-distributor:3100/loki/api/v1/push
      positions:
        filename: /run/promtail/positions.yaml
      scrape_configs:
        {{- tpl .Values.config.snippets.scrapeConfigs $ | nindent 2 }}
  syslogService:
    enabled: true
    type: ClusterIP
    port: 1514

etcd:
  enabled: true
  global:
    imageRegistry: docker.io
    storageClass: my-storage-class
  
  image:
    repository: bitnami/etcd
    tag: 3.4.14-debian-10-r44
  
  statefulset:
    replicaCount: 3
  
  env_vars:
    ETCD_HEARTBEAT_INTERVAL: "150"
    ETCD_MAX_REQUEST_BYTES: "10485760"
    ETCD_QUOTA_BACKEND_BYTES: "8589934592"
    ETCD_SNAPSHOT_COUNT: "10000"
    ETCD_AUTO_COMPACTION_RETENTION: "1"
    ETCD_ELECTION_TIMEOUT: "1500"

  envVarsConfigMap: loki-etcd-env-vars
  
  auth:
    rbac:
      enabled: false
  
  persistence:
    enabled: true
    size: 20Gi
  
  resources:
    limits:
       cpu: 2000m
       memory: 4Gi
    requests:
       cpu: 100m
       memory: 256Mi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      selector:
        release: po
