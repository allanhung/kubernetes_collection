diff --git a/connector/oidc/oidc.go b/connector/oidc/oidc.go
index b8e543d4..80ee802c 100644
--- a/connector/oidc/oidc.go
+++ b/connector/oidc/oidc.go
@@ -254,6 +254,7 @@ func (c *oidcConnector) Refresh(ctx context.Context, s connector.Scopes, identit
 }
 
 func (c *oidcConnector) createIdentity(ctx context.Context, identity connector.Identity, token *oauth2.Token) (connector.Identity, error) {
+  fmt.Printf("createIdentity")
 	rawIDToken, ok := token.Extra("id_token").(string)
 	if !ok {
 		return identity, errors.New("oidc: no id_token in token response")
@@ -323,7 +324,9 @@ func (c *oidcConnector) createIdentity(ctx context.Context, identity connector.I
 	}
 
 	var groups []string
+  fmt.Printf("test group")
 	if c.insecureEnableGroups {
+    fmt.Printf("enable group")
 		groupsKey := "groups"
 		vs, found := claims[groupsKey].([]interface{})
 		if !found {
diff --git a/server/handlers.go b/server/handlers.go
index bd134813..8ad6f0af 100644
--- a/server/handlers.go
+++ b/server/handlers.go
@@ -108,6 +108,7 @@ func (h *healthChecker) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 }
 
 func (s *Server) handlePublicKeys(w http.ResponseWriter, r *http.Request) {
+  s.logger.Infof("handlePublicKeys")
 	// TODO(ericchiang): Cache this.
 	keys, err := s.storage.GetKeys()
 	if err != nil {
@@ -164,6 +165,7 @@ type discovery struct {
 }
 
 func (s *Server) discoveryHandler() (http.HandlerFunc, error) {
+  s.logger.Infof("discoveryHandler")
 	d := discovery{
 		Issuer:         s.issuerURL.String(),
 		Auth:           s.absURL("/auth"),
@@ -201,6 +203,7 @@ func (s *Server) discoveryHandler() (http.HandlerFunc, error) {
 
 // handleAuthorization handles the OAuth2 auth endpoint.
 func (s *Server) handleAuthorization(w http.ResponseWriter, r *http.Request) {
+  s.logger.Infof("handleAuthorization")
 	authReq, err := s.parseAuthorizationRequest(r)
 	if err != nil {
 		s.logger.Errorf("Failed to parse authorization request: %v", err)
@@ -280,6 +283,7 @@ func (s *Server) handleAuthorization(w http.ResponseWriter, r *http.Request) {
 }
 
 func (s *Server) handleConnectorLogin(w http.ResponseWriter, r *http.Request) {
+  s.logger.Infof("handleConnectorLogin")
 	connID := mux.Vars(r)["connector"]
 	conn, err := s.getConnector(connID)
 	if err != nil {
@@ -402,6 +406,7 @@ func (s *Server) handleConnectorLogin(w http.ResponseWriter, r *http.Request) {
 }
 
 func (s *Server) handleConnectorCallback(w http.ResponseWriter, r *http.Request) {
+  s.logger.Infof("handleConnectorCallback")
 	var authID string
 	switch r.Method {
 	case http.MethodGet: // OAuth2 callback
@@ -484,6 +489,7 @@ func (s *Server) handleConnectorCallback(w http.ResponseWriter, r *http.Request)
 // finalizeLogin associates the user's identity with the current AuthRequest, then returns
 // the approval page's path.
 func (s *Server) finalizeLogin(identity connector.Identity, authReq storage.AuthRequest, conn connector.Connector) (string, error) {
+  s.logger.Infof("finalizeLogin")
 	claims := storage.Claims{
 		UserID:            identity.UserID,
 		Username:          identity.Username,
@@ -493,6 +499,7 @@ func (s *Server) finalizeLogin(identity connector.Identity, authReq storage.Auth
 		Groups:            identity.Groups,
 	}
 
+  s.logger.Infof("Claims: %v, ConnectorData: %s", claims, identity.ConnectorData)
 	updater := func(a storage.AuthRequest) (storage.AuthRequest, error) {
 		a.LoggedIn = true
 		a.Claims = claims
@@ -556,6 +563,7 @@ func (s *Server) finalizeLogin(identity connector.Identity, authReq storage.Auth
 }
 
 func (s *Server) handleApproval(w http.ResponseWriter, r *http.Request) {
+  s.logger.Infof("handleApproval")
 	authReq, err := s.storage.GetAuthRequest(r.FormValue("req"))
 	if err != nil {
 		s.logger.Errorf("Failed to get auth request: %v", err)
@@ -593,6 +601,7 @@ func (s *Server) handleApproval(w http.ResponseWriter, r *http.Request) {
 }
 
 func (s *Server) sendCodeResponse(w http.ResponseWriter, r *http.Request, authReq storage.AuthRequest) {
+  s.logger.Infof("sendCodeResponse")
 	if s.now().After(authReq.Expiry) {
 		s.renderError(r, w, http.StatusBadRequest, "User session has expired.")
 		return
@@ -729,6 +738,7 @@ func (s *Server) sendCodeResponse(w http.ResponseWriter, r *http.Request, authRe
 }
 
 func (s *Server) handleToken(w http.ResponseWriter, r *http.Request) {
+  s.logger.Infof("handleToken")
 	clientID, clientSecret, ok := r.BasicAuth()
 	if ok {
 		var err error
@@ -771,10 +781,12 @@ func (s *Server) handleToken(w http.ResponseWriter, r *http.Request) {
 	default:
 		s.tokenErrHelper(w, errInvalidGrant, "", http.StatusBadRequest)
 	}
+  s.logger.Infof("w: %v, r: %v, client: %v", w, r, client)
 }
 
 // handle an access token request https://tools.ietf.org/html/rfc6749#section-4.1.3
 func (s *Server) handleAuthCode(w http.ResponseWriter, r *http.Request, client storage.Client) {
+  s.logger.Infof("handleAuthCode")
 	code := r.PostFormValue("code")
 	redirectURI := r.PostFormValue("redirect_uri")
 
@@ -803,6 +815,7 @@ func (s *Server) handleAuthCode(w http.ResponseWriter, r *http.Request, client s
 }
 
 func (s *Server) exchangeAuthCode(w http.ResponseWriter, authCode storage.AuthCode, client storage.Client) (*accessTokenReponse, error) {
+  s.logger.Infof("exchangeAuthCode")
 	accessToken, err := s.newAccessToken(client.ID, authCode.Claims, authCode.Scopes, authCode.Nonce, authCode.ConnectorID)
 	if err != nil {
 		s.logger.Errorf("failed to create new access token: %v", err)
@@ -810,6 +823,7 @@ func (s *Server) exchangeAuthCode(w http.ResponseWriter, authCode storage.AuthCo
 		return nil, err
 	}
 
+	s.logger.Infof("exchangeAuthCode")
 	idToken, expiry, err := s.newIDToken(client.ID, authCode.Claims, authCode.Scopes, authCode.Nonce, accessToken, authCode.ConnectorID)
 	if err != nil {
 		s.logger.Errorf("failed to create ID token: %v", err)
@@ -864,6 +878,7 @@ func (s *Server) exchangeAuthCode(w http.ResponseWriter, authCode storage.AuthCo
 			RefreshId: refresh.ID,
 			Token:     refresh.Token,
 		}
+    s.logger.Infof("refreshToken: %s", refresh.Token)
 		if refreshToken, err = internal.Marshal(token); err != nil {
 			s.logger.Errorf("failed to marshal refresh token: %v", err)
 			s.tokenErrHelper(w, errServerError, "", http.StatusInternalServerError)
@@ -949,6 +964,7 @@ func (s *Server) exchangeAuthCode(w http.ResponseWriter, authCode storage.AuthCo
 
 // handle a refresh token request https://tools.ietf.org/html/rfc6749#section-6
 func (s *Server) handleRefreshToken(w http.ResponseWriter, r *http.Request, client storage.Client) {
+  s.logger.Infof("handleRefreshToken")
 	code := r.PostFormValue("refresh_token")
 	scope := r.PostFormValue("scope")
 	if code == "" {
@@ -1034,6 +1050,7 @@ func (s *Server) handleRefreshToken(w http.ResponseWriter, r *http.Request, clie
 	default:
 		connectorData = session.ConnectorData
 	}
+  s.logger.Errorf("connectorData: %s", connectorData)
 
 	conn, err := s.getConnector(refresh.ConnectorID)
 	if err != nil {
@@ -1148,6 +1165,7 @@ func (s *Server) handleRefreshToken(w http.ResponseWriter, r *http.Request, clie
 }
 
 func (s *Server) handleUserInfo(w http.ResponseWriter, r *http.Request) {
+  s.logger.Infof("handleUserInfo")
 	const prefix = "Bearer "
 
 	auth := r.Header.Get("authorization")
@@ -1176,6 +1194,7 @@ func (s *Server) handleUserInfo(w http.ResponseWriter, r *http.Request) {
 }
 
 func (s *Server) handlePasswordGrant(w http.ResponseWriter, r *http.Request, client storage.Client) {
+  s.logger.Infof("handlePasswordGrant")
 	// Parse the fields
 	if err := r.ParseForm(); err != nil {
 		s.tokenErrHelper(w, errInvalidRequest, "Couldn't parse data", http.StatusBadRequest)
@@ -1405,6 +1424,7 @@ type accessTokenReponse struct {
 }
 
 func (s *Server) toAccessTokenResponse(idToken, accessToken, refreshToken string, expiry time.Time) *accessTokenReponse {
+  s.logger.Infof("toAccessTokenResponse")
 	return &accessTokenReponse{
 		accessToken,
 		"bearer",
@@ -1415,6 +1435,7 @@ func (s *Server) toAccessTokenResponse(idToken, accessToken, refreshToken string
 }
 
 func (s *Server) writeAccessToken(w http.ResponseWriter, resp *accessTokenReponse) {
+  s.logger.Infof("writeAccessToken")
 	data, err := json.Marshal(resp)
 	if err != nil {
 		s.logger.Errorf("failed to marshal access token response: %v", err)
@@ -1427,12 +1448,14 @@ func (s *Server) writeAccessToken(w http.ResponseWriter, resp *accessTokenRepons
 }
 
 func (s *Server) renderError(r *http.Request, w http.ResponseWriter, status int, description string) {
+  s.logger.Infof("renderError")
 	if err := s.templates.err(r, w, status, description); err != nil {
 		s.logger.Errorf("Server template error: %v", err)
 	}
 }
 
 func (s *Server) tokenErrHelper(w http.ResponseWriter, typ string, description string, statusCode int) {
+  s.logger.Infof("tokenErrHelper")
 	if err := tokenErr(w, typ, description, statusCode); err != nil {
 		s.logger.Errorf("token error response: %v", err)
 	}
@@ -1440,6 +1463,7 @@ func (s *Server) tokenErrHelper(w http.ResponseWriter, typ string, description s
 
 // Check for username prompt override from connector. Defaults to "Username".
 func usernamePrompt(conn connector.PasswordConnector) string {
+  fmt.Printf("usernamePrompt")
 	if attr := conn.Prompt(); attr != "" {
 		return attr
 	}
